import classnames from 'classnames';
import React from 'react';
import { jsx, jsxs } from 'react/jsx-runtime';
import PropTypes from 'prop-types';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var styles = {"label":"_4GdcU","textareaView":"_G0k44","shared":"_i5--j","placeholder":"_TDklp","inline":"_gmkRL","readonly":"_-wzeg","displayContainer":"_IYz6Z","editButton":"_NGZSv"};

var _excluded$1 = ["props", "inputRef", "handleBlur", "handleKeydown", "handleFocus", "inputClassName"];

var Input = function Input(_ref) {
  var _classnames;

  var _ref$props = _ref.props,
      id = _ref$props.id,
      inline = _ref$props.inline,
      style = _ref$props.style,
      type = _ref$props.type,
      name = _ref$props.name,
      inputRef = _ref.inputRef,
      handleBlur = _ref.handleBlur,
      handleKeydown = _ref.handleKeydown,
      handleFocus = _ref.handleFocus,
      inputClassName = _ref.inputClassName,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  return /*#__PURE__*/jsx("input", _extends({
    id: id,
    className: classnames(styles.shared, inputClassName, (_classnames = {}, _classnames[styles.inline] = inline, _classnames)),
    style: style,
    ref: inputRef,
    type: type,
    name: name,
    onBlur: handleBlur,
    onKeyDown: handleKeydown,
    autoFocus: true,
    onFocus: handleFocus
  }, rest));
};

var EditIcon = function EditIcon() {
  return /*#__PURE__*/jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 512 512",
    children: /*#__PURE__*/jsx("path", {
      d: "M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z"
    })
  });
};

var sharedDefaultProps = {
  id: undefined,
  name: undefined,
  className: undefined,
  value: undefined,
  formatDisplayText: function formatDisplayText(x) {
    return x;
  },
  defaultValue: undefined,
  placeholder: '',
  onSave: function onSave() {},
  onChange: function onChange() {},
  onEditMode: function onEditMode() {},
  onBlur: function onBlur() {},
  style: {},
  readonly: false,
  inputClassName: undefined
};
var sharedPropTypes = {
  id: PropTypes.string,
  name: PropTypes.string,
  className: PropTypes.string,
  value: PropTypes.string,
  formatDisplayText: PropTypes.func,
  defaultValue: PropTypes.string,
  placeholder: PropTypes.string,
  onSave: PropTypes.func,
  onChange: PropTypes.func,
  onEditMode: PropTypes.func,
  onBlur: PropTypes.func,
  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
  readonly: PropTypes.bool,
  inputClassName: PropTypes.string
};
var EditTextPropTypes = _extends({}, sharedPropTypes, {
  type: PropTypes.string,
  inline: PropTypes.bool,
  showEditButton: PropTypes.bool,
  editButtonContent: PropTypes.any,
  editButtonProps: PropTypes.object
});
var EditTextDefaultProps = _extends({}, sharedDefaultProps, {
  type: 'text',
  inline: false,
  showEditButton: false,
  editButtonContent: /*#__PURE__*/jsx(EditIcon, {}),
  editButtonProps: {}
});
var EditTextareaPropTypes = _extends({}, sharedPropTypes, {
  rows: PropTypes.number
});
var EditTextareaDefaultProps = _extends({}, sharedDefaultProps, {
  rows: 3
});

function EditText(_ref) {
  var id = _ref.id,
      name = _ref.name,
      className = _ref.className,
      placeholder = _ref.placeholder,
      inline = _ref.inline,
      style = _ref.style,
      readonly = _ref.readonly,
      type = _ref.type,
      value = _ref.value,
      defaultValue = _ref.defaultValue,
      formatDisplayText = _ref.formatDisplayText,
      onEditMode = _ref.onEditMode,
      _onChange = _ref.onChange,
      onSave = _ref.onSave,
      onBlur = _ref.onBlur,
      showEditButton = _ref.showEditButton,
      editButtonContent = _ref.editButtonContent,
      editButtonProps = _ref.editButtonProps,
      inputClassName = _ref.inputClassName;
  var inputRef = React.useRef(null);

  var _React$useState = React.useState({}),
      changeEvent = _React$useState[0],
      setChangeEvent = _React$useState[1];

  var _React$useState2 = React.useState(''),
      previousValue = _React$useState2[0],
      setPreviousValue = _React$useState2[1];

  var _React$useState3 = React.useState(''),
      savedText = _React$useState3[0],
      setSavedText = _React$useState3[1];

  var _React$useState4 = React.useState(false),
      editMode = _React$useState4[0],
      setEditMode = _React$useState4[1];

  React.useEffect(function () {
    if (defaultValue !== undefined) {
      setPreviousValue(defaultValue);
      setSavedText(defaultValue);
    }
  }, [defaultValue]);
  React.useEffect(function () {
    if (value !== undefined) {
      setSavedText(value);

      if (!editMode) {
        setPreviousValue(value);
      }
    }
  }, [value, editMode]);

  var handleClickDisplay = function handleClickDisplay() {
    if (readonly || showEditButton) return;
    setEditMode(true);
    onEditMode();
  };

  var handleClickEditButton = function handleClickEditButton() {
    setEditMode(true);
    onEditMode();
  };

  var handleBlur = function handleBlur(save) {
    if (save === void 0) {
      save = true;
    }

    if (inputRef.current) {
      var _inputRef$current = inputRef.current,
          inputName = _inputRef$current.name,
          inputValue = _inputRef$current.value;

      if (save && previousValue !== inputValue) {
        onSave({
          name: inputName,
          value: inputValue,
          previousValue: previousValue
        });
        setSavedText(inputValue);
        setPreviousValue(inputValue);
      } else if (!save) {
        _onChange(_extends({}, changeEvent, {
          target: changeEvent.target ? _extends({}, changeEvent.target, {
            value: previousValue
          }) : {
            value: previousValue
          }
        }));
      }

      setEditMode(false);
      onBlur();
    }
  };

  var handleKeydown = function handleKeydown(e) {
    if (e.keyCode === 13 || e.charCode === 13) {
      handleBlur();
    } else if (e.keyCode === 27 || e.charCode === 27) {
      handleBlur(false);
    }
  };

  var handleFocus = function handleFocus(e) {
    if (type === 'text') {
      e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
    }
  };

  var renderDisplayMode = function renderDisplayMode() {
    var _classnames, _classnames2;

    return /*#__PURE__*/jsxs("div", {
      className: classnames(styles.displayContainer, (_classnames = {}, _classnames[styles.inline] = inline, _classnames)),
      children: [/*#__PURE__*/jsx("div", {
        id: id,
        className: classnames(styles.label, styles.shared, (_classnames2 = {}, _classnames2[styles.placeholder] = placeholder && !savedText, _classnames2[styles.inline] = inline, _classnames2[styles.readonly] = readonly || showEditButton, _classnames2), className),
        onClick: handleClickDisplay,
        style: style,
        "aria-label": "display component",
        children: formatDisplayText(savedText) || placeholder
      }), showEditButton && !readonly && /*#__PURE__*/jsx("button", _extends({
        type: "button",
        className: styles.editButton
      }, editButtonProps, {
        onClick: handleClickEditButton,
        children: editButtonContent
      }))]
    });
  };

  var renderEditMode = function renderEditMode(controlled) {
    var _sharedProps;

    var sharedProps = (_sharedProps = {
      inputRef: inputRef,
      handleBlur: handleBlur,
      handleKeydown: handleKeydown,
      handleFocus: handleFocus,
      props: {
        id: id,
        inline: inline,
        style: style,
        type: type,
        name: name
      }
    }, _sharedProps['aria-label'] = 'input component', _sharedProps);
    return controlled ? /*#__PURE__*/jsx(Input, _extends({}, sharedProps, {
      value: value,
      onChange: function onChange(e) {
        setChangeEvent(e);

        _onChange(e);
      },
      inputClassName: inputClassName
    })) : /*#__PURE__*/jsx(Input, _extends({}, sharedProps, {
      defaultValue: savedText,
      inputClassName: inputClassName
    }));
  };

  return !readonly && editMode ? renderEditMode(value !== undefined && _onChange !== undefined) : renderDisplayMode();
}
EditText.defaultProps = EditTextDefaultProps;
EditText.propTypes = EditTextPropTypes;

var _excluded = ["props", "inputRef", "handleBlur", "handleKeydown", "inputClassName"];

var Textarea = function Textarea(_ref) {
  var _ref$props = _ref.props,
      id = _ref$props.id,
      rows = _ref$props.rows,
      style = _ref$props.style,
      name = _ref$props.name,
      inputRef = _ref.inputRef,
      handleBlur = _ref.handleBlur,
      handleKeydown = _ref.handleKeydown,
      inputClassName = _ref.inputClassName,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded);

  return /*#__PURE__*/jsx("textarea", _extends({
    id: id,
    className: classnames(styles.shared, inputClassName),
    style: style,
    ref: inputRef,
    rows: rows,
    name: name,
    onBlur: handleBlur,
    onKeyDown: handleKeydown,
    autoFocus: true,
    onFocus: function onFocus(e) {
      return e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
    }
  }, rest));
};

var splitLines = function splitLines(val) {
  return val ? val.split(/\r?\n/) : [];
};

function EditTextarea(_ref) {
  var id = _ref.id,
      rows = _ref.rows,
      name = _ref.name,
      className = _ref.className,
      placeholder = _ref.placeholder,
      style = _ref.style,
      readonly = _ref.readonly,
      value = _ref.value,
      defaultValue = _ref.defaultValue,
      formatDisplayText = _ref.formatDisplayText,
      onEditMode = _ref.onEditMode,
      _onChange = _ref.onChange,
      onSave = _ref.onSave,
      onBlur = _ref.onBlur,
      inputClassName = _ref.inputClassName;
  var inputRef = React.useRef(null);

  var _React$useState = React.useState({}),
      changeEvent = _React$useState[0],
      setChangeEvent = _React$useState[1];

  var _React$useState2 = React.useState(''),
      previousValue = _React$useState2[0],
      setPreviousValue = _React$useState2[1];

  var _React$useState3 = React.useState(''),
      savedText = _React$useState3[0],
      setSavedText = _React$useState3[1];

  var _React$useState4 = React.useState(false),
      editMode = _React$useState4[0],
      setEditMode = _React$useState4[1];

  React.useEffect(function () {
    if (defaultValue !== undefined) {
      setPreviousValue(defaultValue);
      setSavedText(defaultValue);
    }
  }, [defaultValue]);
  React.useEffect(function () {
    if (value !== undefined) {
      setSavedText(value);

      if (!editMode) {
        setPreviousValue(value);
      }
    }
  }, [value, editMode]);

  var handleClick = function handleClick() {
    if (readonly) return;
    setEditMode(true);
    onEditMode();
  };

  var handleBlur = function handleBlur(save) {
    if (save === void 0) {
      save = true;
    }

    if (inputRef.current) {
      var _inputRef$current = inputRef.current,
          inputName = _inputRef$current.name,
          inputValue = _inputRef$current.value;

      if (save && previousValue !== inputValue) {
        onSave({
          name: inputName,
          value: inputValue,
          previousValue: previousValue
        });
        setSavedText(inputValue);
        setPreviousValue(inputValue);
      } else if (!save) {
        _onChange(_extends({}, changeEvent, {
          target: changeEvent.target ? _extends({}, changeEvent.target, {
            value: previousValue
          }) : {
            value: previousValue
          }
        }));
      }

      setEditMode(false);
      onBlur();
    }
  };

  var handleKeydown = function handleKeydown(e) {
    if (e.keyCode === 27 || e.charCode === 27) {
      handleBlur(false);
    }
  };

  var renderDisplayMode = function renderDisplayMode() {
    var _classnames;

    var textLines = splitLines(formatDisplayText(savedText));
    return /*#__PURE__*/jsx("div", {
      id: id,
      className: classnames(styles.shared, styles.textareaView, (_classnames = {}, _classnames[styles.placeholder] = placeholder && !savedText, _classnames[styles.readonly] = readonly, _classnames), className),
      onClick: handleClick,
      style: _extends({}, style, {
        height: rows * 24 + 16 + "px"
      }),
      "aria-label": "display component",
      children: textLines.length > 0 ? textLines.map(function (text, index) {
        return /*#__PURE__*/jsxs(React.Fragment, {
          children: [/*#__PURE__*/jsx("span", {
            children: text
          }), /*#__PURE__*/jsx("br", {})]
        }, index);
      }) : /*#__PURE__*/jsx("span", {
        children: placeholder
      })
    });
  };

  var renderEditMode = function renderEditMode(controlled) {
    var _sharedProps;

    var sharedProps = (_sharedProps = {
      inputRef: inputRef,
      handleBlur: handleBlur,
      handleKeydown: handleKeydown,
      props: {
        id: id,
        rows: rows,
        style: style,
        name: name
      }
    }, _sharedProps['aria-label'] = 'textarea component', _sharedProps);
    return controlled ? /*#__PURE__*/jsx(Textarea, _extends({}, sharedProps, {
      value: value,
      onChange: function onChange(e) {
        setChangeEvent(e);

        _onChange(e);
      },
      inputClassName: inputClassName
    })) : /*#__PURE__*/jsx(Textarea, _extends({}, sharedProps, {
      defaultValue: savedText,
      inputClassName: inputClassName
    }));
  };

  return !readonly && editMode ? renderEditMode(value !== undefined && _onChange !== undefined) : renderDisplayMode();
}
EditTextarea.defaultProps = EditTextareaDefaultProps;
EditTextarea.propTypes = EditTextareaPropTypes;

export { EditText, EditTextarea };
//# sourceMappingURL=index.modern.js.map
